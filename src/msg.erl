%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.1
-module(msg).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Person'() :: #'Person'{}.

-type 'Location'() :: #'Location'{}.

-type c_login() :: #c_login{}.

-type s_login() :: #s_login{}.

-type c_user_list() :: #c_user_list{}.

-type s_user_list() :: #s_user_list{}.

-type p_user_info() :: #p_user_info{}.

-export_type(['Person'/0, 'Location'/0, 'c_login'/0, 's_login'/0, 'c_user_list'/0, 's_user_list'/0, 'p_user_info'/0]).

-spec encode_msg(#'Person'{} | #'Location'{} | #c_login{} | #s_login{} | #c_user_list{} | #s_user_list{} | #p_user_info{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Person'{} | #'Location'{} | #c_login{} | #s_login{} | #c_user_list{} | #s_user_list{} | #p_user_info{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Person'{} | #'Location'{} | #c_login{} | #s_login{} | #c_user_list{} | #s_user_list{} | #p_user_info{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' ->
	  encode_msg_Person(id(Msg, TrUserData), TrUserData);
      'Location' ->
	  encode_msg_Location(id(Msg, TrUserData), TrUserData);
      c_login ->
	  encode_msg_c_login(id(Msg, TrUserData), TrUserData);
      s_login ->
	  encode_msg_s_login(id(Msg, TrUserData), TrUserData);
      c_user_list ->
	  encode_msg_c_user_list(id(Msg, TrUserData), TrUserData);
      s_user_list ->
	  encode_msg_s_user_list(id(Msg, TrUserData), TrUserData);
      p_user_info ->
	  encode_msg_p_user_info(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Person(Msg, TrUserData) ->
    encode_msg_Person(Msg, <<>>, TrUserData).


encode_msg_Person(#'Person'{name = F1, address = F2,
			    phone_number = F3, age = F4, location = F5},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true ->
		    e_mfield_Person_location(TrF5, <<B4/binary, 42>>,
					     TrUserData)
	     end
	   end
    end.

encode_msg_Location(Msg, TrUserData) ->
    encode_msg_Location(Msg, <<>>, TrUserData).


encode_msg_Location(#'Location'{region = F1,
				country = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_c_login(Msg, TrUserData) ->
    encode_msg_c_login(Msg, <<>>, TrUserData).


encode_msg_c_login(#c_login{username = F1,
			    password = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_s_login(Msg, TrUserData) ->
    encode_msg_s_login(Msg, <<>>, TrUserData).


encode_msg_s_login(#s_login{code = F1, msg = F2,
			    info = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_s_login_info(TrF3, <<B2/binary, 26>>,
					  TrUserData)
	     end
	   end
    end.

encode_msg_c_user_list(Msg, TrUserData) ->
    encode_msg_c_user_list(Msg, <<>>, TrUserData).


encode_msg_c_user_list(#c_user_list{type = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_s_user_list(Msg, TrUserData) ->
    encode_msg_s_user_list(Msg, <<>>, TrUserData).


encode_msg_s_user_list(#s_user_list{list = F1}, Bin,
		       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_s_user_list_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_p_user_info(Msg, TrUserData) ->
    encode_msg_p_user_info(Msg, <<>>, TrUserData).


encode_msg_p_user_info(#p_user_info{id = F1, state = F2,
				    username = F3, nickname = F4},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

e_mfield_Person_location(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Location(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_s_login_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_user_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_s_user_list_list(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_user_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_user_list_list([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_s_user_list_list(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_s_user_list_list(Rest, Bin3, TrUserData);
e_field_s_user_list_list([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Person', Bin, TrUserData) ->
    id(decode_msg_Person(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Location', Bin, TrUserData) ->
    id(decode_msg_Location(Bin, TrUserData), TrUserData);
decode_msg_2_doit(c_login, Bin, TrUserData) ->
    id(decode_msg_c_login(Bin, TrUserData), TrUserData);
decode_msg_2_doit(s_login, Bin, TrUserData) ->
    id(decode_msg_s_login(Bin, TrUserData), TrUserData);
decode_msg_2_doit(c_user_list, Bin, TrUserData) ->
    id(decode_msg_c_user_list(Bin, TrUserData), TrUserData);
decode_msg_2_doit(s_user_list, Bin, TrUserData) ->
    id(decode_msg_s_user_list(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_user_info, Bin, TrUserData) ->
    id(decode_msg_p_user_info(Bin, TrUserData), TrUserData).



decode_msg_Person(Bin, TrUserData) ->
    dfp_read_field_def_Person(Bin, 0, 0, id([], TrUserData),
			      id([], TrUserData), id([], TrUserData),
			      id(0, TrUserData), id(undefined, TrUserData),
			      TrUserData).

dfp_read_field_def_Person(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Person_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Person(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Person_address(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Person(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Person_phone_number(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Person(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Person_age(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_Person(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Person_location(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #'Person'{name = F@_1, address = F@_2,
	      phone_number = F@_3, age = F@_4, location = F@_5};
dfp_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Person(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Person(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Person(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Person_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      18 ->
	  d_field_Person_address(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      26 ->
	  d_field_Person_phone_number(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_Person_age(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      42 ->
	  d_field_Person_location(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_Person(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Person(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'Person'{name = F@_1, address = F@_2,
	      phone_number = F@_3, age = F@_4, location = F@_5}.

d_field_Person_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Person_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Person_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_Person_address(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Person_address(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Person_address(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_Person_phone_number(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Person_phone_number(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Person_phone_number(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_Person_age(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Person_age(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Person_age(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, TrUserData).

d_field_Person_location(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Person_location(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Person_location(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Location(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_Location(Prev, NewFValue,
							TrUserData)
			      end,
			      TrUserData).

skip_varint_Person(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Person(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_Person(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Person(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Person(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Person(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Person(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_Person(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Person(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_Person(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_Person(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

decode_msg_Location(Bin, TrUserData) ->
    dfp_read_field_def_Location(Bin, 0, 0,
				id([], TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_Location(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_Location_region(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Location(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_Location_country(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_Location(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'Location'{region = F@_1, country = F@_2};
dfp_read_field_def_Location(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_Location(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_Location(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Location(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_Location(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Location_region(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_Location_country(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Location(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_Location(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Location(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_Location(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_Location(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Location(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Location'{region = F@_1, country = F@_2}.

d_field_Location_region(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Location_region(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Location_region(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Location(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_Location_country(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Location_country(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_Location_country(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Location(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_Location(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_Location(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_Location(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Location(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_Location(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Location(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Location(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Location(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_Location(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Location(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_Location(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_Location(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_Location(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_Location(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_c_login(Bin, TrUserData) ->
    dfp_read_field_def_c_login(Bin, 0, 0,
			       id([], TrUserData), id([], TrUserData),
			       TrUserData).

dfp_read_field_def_c_login(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_c_login_username(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_c_login(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_c_login_password(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #c_login{username = F@_1, password = F@_2};
dfp_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_c_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_c_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_login_username(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_c_login_password(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_c_login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_c_login(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_c_login(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_c_login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #c_login{username = F@_1, password = F@_2}.

d_field_c_login_username(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_login_username(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_c_login_username(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_c_login_password(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_login_password(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_c_login_password(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_c_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_c_login(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_c_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_c_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_c_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_login(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_c_login(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_login(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_c_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_c_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_s_login(Bin, TrUserData) ->
    dfp_read_field_def_s_login(Bin, 0, 0, id(0, TrUserData),
			       id([], TrUserData), id(undefined, TrUserData),
			       TrUserData).

dfp_read_field_def_s_login(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_s_login(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_s_login(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_info(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_s_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #s_login{code = F@_1, msg = F@_2, info = F@_3};
dfp_read_field_def_s_login(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_s_login(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_s_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_s_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_login_code(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      18 ->
	  d_field_s_login_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      26 ->
	  d_field_s_login_info(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_s_login(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_s_login(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_s_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #s_login{code = F@_1, msg = F@_2, info = F@_3}.

d_field_s_login_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_code(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_s_login_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_s_login(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_s_login_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_s_login_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_login(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_s_login_info(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_info(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_s_login_info(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_user_info(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_login(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_user_info(Prev, NewFValue,
							    TrUserData)
			       end,
			       TrUserData).

skip_varint_s_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_s_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_s_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_s_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_s_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_login(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_s_login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_login(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_s_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_s_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_c_user_list(Bin, TrUserData) ->
    dfp_read_field_def_c_user_list(Bin, 0, 0,
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_c_user_list(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_c_user_list_type(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_c_user_list(<<>>, 0, 0, F@_1, _) ->
    #c_user_list{type = F@_1};
dfp_read_field_def_c_user_list(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_c_user_list(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_c_user_list(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_user_list(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_user_list(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_user_list_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_user_list(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_user_list(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_user_list(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_c_user_list(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_c_user_list(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_user_list(<<>>, 0, 0, F@_1, _) ->
    #c_user_list{type = F@_1}.

d_field_c_user_list_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_user_list_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_c_user_list_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_c_user_list(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_c_user_list(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_c_user_list(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_c_user_list(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_c_user_list(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_user_list(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_user_list(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_user_list(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_c_user_list(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_user_list(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_c_user_list(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_c_user_list(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_s_user_list(Bin, TrUserData) ->
    dfp_read_field_def_s_user_list(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_s_user_list(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_s_user_list_list(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_s_user_list(<<>>, 0, 0, R1,
			       TrUserData) ->
    #s_user_list{list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_user_list(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_s_user_list(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_s_user_list(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_user_list(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_user_list(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_user_list_list(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_user_list(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_user_list(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_user_list(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_s_user_list(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_s_user_list(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_user_list(<<>>, 0, 0, R1,
			      TrUserData) ->
    #s_user_list{list = lists_reverse(R1, TrUserData)}.

d_field_s_user_list_list(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_user_list_list(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_s_user_list_list(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_user_info(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_user_list(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_s_user_list(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_s_user_list(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s_user_list(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_s_user_list(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_user_list(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_user_list(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_user_list(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_s_user_list(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_user_list(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_s_user_list(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_s_user_list(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_user_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_p_user_info(Bin, TrUserData) ->
    dfp_read_field_def_p_user_info(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id([], TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_p_user_info(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_user_info_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_p_user_info(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_user_info_state(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_p_user_info(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_user_info_username(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_p_user_info(<<34, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_user_info_nickname(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_p_user_info(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    #p_user_info{id = F@_1, state = F@_2, username = F@_3,
		 nickname = F@_4};
dfp_read_field_def_p_user_info(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_user_info(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_p_user_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_user_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_p_user_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_user_info_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      16 ->
	  d_field_p_user_info_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      26 ->
	  d_field_p_user_info_username(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      34 ->
	  d_field_p_user_info_nickname(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_user_info(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_p_user_info(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_p_user_info(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_p_user_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_user_info(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_p_user_info(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #p_user_info{id = F@_1, state = F@_2, username = F@_3,
		 nickname = F@_4}.

d_field_p_user_info_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_user_info_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_p_user_info_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_user_info(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_p_user_info_state(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_user_info_state(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_user_info_state(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_user_info(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_p_user_info_username(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_user_info_username(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_user_info_username(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_user_info(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, TrUserData).

d_field_p_user_info_nickname(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_user_info_nickname(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_user_info_nickname(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_user_info(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, TrUserData).

skip_varint_p_user_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_user_info(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_p_user_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_user_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_p_user_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_user_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_p_user_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_user_info(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_p_user_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_user_info(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_p_user_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_user_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_p_user_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_user_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> merge_msg_Person(Prev, New, TrUserData);
      'Location' -> merge_msg_Location(Prev, New, TrUserData);
      c_login -> merge_msg_c_login(Prev, New, TrUserData);
      s_login -> merge_msg_s_login(Prev, New, TrUserData);
      c_user_list ->
	  merge_msg_c_user_list(Prev, New, TrUserData);
      s_user_list ->
	  merge_msg_s_user_list(Prev, New, TrUserData);
      p_user_info ->
	  merge_msg_p_user_info(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Person/3}).
merge_msg_Person(#'Person'{name = PFname,
			   address = PFaddress, phone_number = PFphone_number,
			   age = PFage, location = PFlocation},
		 #'Person'{name = NFname, address = NFaddress,
			   phone_number = NFphone_number, age = NFage,
			   location = NFlocation},
		 TrUserData) ->
    #'Person'{name =
		  if NFname =:= undefined -> PFname;
		     true -> NFname
		  end,
	      address =
		  if NFaddress =:= undefined -> PFaddress;
		     true -> NFaddress
		  end,
	      phone_number =
		  if NFphone_number =:= undefined -> PFphone_number;
		     true -> NFphone_number
		  end,
	      age =
		  if NFage =:= undefined -> PFage;
		     true -> NFage
		  end,
	      location =
		  if PFlocation /= undefined, NFlocation /= undefined ->
			 merge_msg_Location(PFlocation, NFlocation, TrUserData);
		     PFlocation == undefined -> NFlocation;
		     NFlocation == undefined -> PFlocation
		  end}.

-compile({nowarn_unused_function,merge_msg_Location/3}).
merge_msg_Location(#'Location'{region = PFregion,
			       country = PFcountry},
		   #'Location'{region = NFregion, country = NFcountry},
		   _) ->
    #'Location'{region =
		    if NFregion =:= undefined -> PFregion;
		       true -> NFregion
		    end,
		country =
		    if NFcountry =:= undefined -> PFcountry;
		       true -> NFcountry
		    end}.

-compile({nowarn_unused_function,merge_msg_c_login/3}).
merge_msg_c_login(#c_login{username = PFusername,
			   password = PFpassword},
		  #c_login{username = NFusername, password = NFpassword},
		  _) ->
    #c_login{username =
		 if NFusername =:= undefined -> PFusername;
		    true -> NFusername
		 end,
	     password =
		 if NFpassword =:= undefined -> PFpassword;
		    true -> NFpassword
		 end}.

-compile({nowarn_unused_function,merge_msg_s_login/3}).
merge_msg_s_login(#s_login{code = PFcode, msg = PFmsg,
			   info = PFinfo},
		  #s_login{code = NFcode, msg = NFmsg, info = NFinfo},
		  TrUserData) ->
    #s_login{code =
		 if NFcode =:= undefined -> PFcode;
		    true -> NFcode
		 end,
	     msg =
		 if NFmsg =:= undefined -> PFmsg;
		    true -> NFmsg
		 end,
	     info =
		 if PFinfo /= undefined, NFinfo /= undefined ->
			merge_msg_p_user_info(PFinfo, NFinfo, TrUserData);
		    PFinfo == undefined -> NFinfo;
		    NFinfo == undefined -> PFinfo
		 end}.

-compile({nowarn_unused_function,merge_msg_c_user_list/3}).
merge_msg_c_user_list(#c_user_list{type = PFtype},
		      #c_user_list{type = NFtype}, _) ->
    #c_user_list{type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end}.

-compile({nowarn_unused_function,merge_msg_s_user_list/3}).
merge_msg_s_user_list(#s_user_list{list = PFlist},
		      #s_user_list{list = NFlist}, TrUserData) ->
    #s_user_list{list =
		     if PFlist /= undefined, NFlist /= undefined ->
			    'erlang_++'(PFlist, NFlist, TrUserData);
			PFlist == undefined -> NFlist;
			NFlist == undefined -> PFlist
		     end}.

-compile({nowarn_unused_function,merge_msg_p_user_info/3}).
merge_msg_p_user_info(#p_user_info{id = PFid,
				   state = PFstate, username = PFusername,
				   nickname = PFnickname},
		      #p_user_info{id = NFid, state = NFstate,
				   username = NFusername,
				   nickname = NFnickname},
		      _) ->
    #p_user_info{id =
		     if NFid =:= undefined -> PFid;
			true -> NFid
		     end,
		 state =
		     if NFstate =:= undefined -> PFstate;
			true -> NFstate
		     end,
		 username =
		     if NFusername =:= undefined -> PFusername;
			true -> NFusername
		     end,
		 nickname =
		     if NFnickname =:= undefined -> PFnickname;
			true -> NFnickname
		     end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> v_msg_Person(Msg, [MsgName], TrUserData);
      'Location' ->
	  v_msg_Location(Msg, [MsgName], TrUserData);
      c_login -> v_msg_c_login(Msg, [MsgName], TrUserData);
      s_login -> v_msg_s_login(Msg, [MsgName], TrUserData);
      c_user_list ->
	  v_msg_c_user_list(Msg, [MsgName], TrUserData);
      s_user_list ->
	  v_msg_s_user_list(Msg, [MsgName], TrUserData);
      p_user_info ->
	  v_msg_p_user_info(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Person/3}).
-dialyzer({nowarn_function,v_msg_Person/3}).
v_msg_Person(#'Person'{name = F1, address = F2,
		       phone_number = F3, age = F4, location = F5},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [address | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [phone_number | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [age | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_Location(F5, [location | Path], TrUserData)
    end,
    ok;
v_msg_Person(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Person'}, X, Path).

-compile({nowarn_unused_function,v_msg_Location/3}).
-dialyzer({nowarn_function,v_msg_Location/3}).
v_msg_Location(#'Location'{region = F1, country = F2},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [region | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [country | Path], TrUserData)
    end,
    ok;
v_msg_Location(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Location'}, X, Path).

-compile({nowarn_unused_function,v_msg_c_login/3}).
-dialyzer({nowarn_function,v_msg_c_login/3}).
v_msg_c_login(#c_login{username = F1, password = F2},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [username | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    ok;
v_msg_c_login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, c_login}, X, Path).

-compile({nowarn_unused_function,v_msg_s_login/3}).
-dialyzer({nowarn_function,v_msg_s_login/3}).
v_msg_s_login(#s_login{code = F1, msg = F2, info = F3},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_p_user_info(F3, [info | Path], TrUserData)
    end,
    ok;
v_msg_s_login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s_login}, X, Path).

-compile({nowarn_unused_function,v_msg_c_user_list/3}).
-dialyzer({nowarn_function,v_msg_c_user_list/3}).
v_msg_c_user_list(#c_user_list{type = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_c_user_list(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, c_user_list}, X, Path).

-compile({nowarn_unused_function,v_msg_s_user_list/3}).
-dialyzer({nowarn_function,v_msg_s_user_list/3}).
v_msg_s_user_list(#s_user_list{list = F1}, Path,
		  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_user_info(Elem, [list | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_user_info}}, F1,
			 [list | Path])
    end,
    ok;
v_msg_s_user_list(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s_user_list}, X, Path).

-compile({nowarn_unused_function,v_msg_p_user_info/3}).
-dialyzer({nowarn_function,v_msg_p_user_info/3}).
v_msg_p_user_info(#p_user_info{id = F1, state = F2,
			       username = F3, nickname = F4},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [state | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [username | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [nickname | Path], TrUserData)
    end,
    ok;
v_msg_p_user_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_user_info}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Person'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = address, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = phone_number, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = age, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = location, fnum = 5, rnum = 6,
	      type = {msg, 'Location'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Location'},
      [#field{name = region, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = country, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, c_login},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, s_login},
      [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = info, fnum = 3, rnum = 4,
	      type = {msg, p_user_info}, occurrence = optional,
	      opts = []}]},
     {{msg, c_user_list},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, s_user_list},
      [#field{name = list, fnum = 1, rnum = 2,
	      type = {msg, p_user_info}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_user_info},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = nickname, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Person', 'Location', c_login, s_login, c_user_list,
     s_user_list, p_user_info].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Person', 'Location', c_login, s_login, c_user_list,
     s_user_list, p_user_info].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Person') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = address, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = phone_number, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = age, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = location, fnum = 5, rnum = 6,
	    type = {msg, 'Location'}, occurrence = optional,
	    opts = []}];
find_msg_def('Location') ->
    [#field{name = region, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = country, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(c_login) ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(s_login) ->
    [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = info, fnum = 3, rnum = 4,
	    type = {msg, p_user_info}, occurrence = optional,
	    opts = []}];
find_msg_def(c_user_list) ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(s_user_list) ->
    [#field{name = list, fnum = 1, rnum = 2,
	    type = {msg, p_user_info}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_user_info) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = nickname, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> protobuf.



gpb_version_as_string() ->
    "4.4.1".

gpb_version_as_list() ->
    [4,4,1].
