#include <list>
#include <math.h>
#include "colScene.h"
#include "btBulletDynamicsCommon.h"

using namespace std;

//
struct MyColCallBack : btCollisionWorld::ContactResultCallback
{
    public:
        btScalar addSingleResult(
            btManifoldPoint & cp,
            const btCollisionObjectWrapper * colObj0Wrap,
            int partId0,
            int index0,
            const btCollisionObjectWrapper * colObj1Wrap,
            int partId1,
            int index1)
        {
            btVector3 pos = cp.getPositionWorldOnA();
            printf("col pos {%f, %f, %f}\n", pos.getX(), pos.getY(), pos.getZ());
            return btScalar(0.f);
        };
};

// --------------------
//
colScene::colScene()
{
    g_colPos = new btVector3();
    g_colConfig = new btDefaultCollisionConfiguration();
    g_dispatcher = new btCollisionDispatcher(g_colConfig);
    g_broadInterface = new btDbvtBroadphase();

    g_solver = new btSequentialImpulseConstraintSolver;
    g_world = new btDiscreteDynamicsWorld(g_dispatcher, g_broadInterface, g_solver, g_colConfig);

    // add a test box
    {
        btCollisionShape* shape = new btBoxShape(btVector3(btScalar(1000.),btScalar(10.),btScalar(1000.)));
        btTransform trans;
        trans.setIdentity();
        trans.setOrigin(btVector3(0, -10, 0));

        btScalar mass=0.f;
        btVector3 localInertia(0, 0, 0);
        bool isDynamic = (mass != 0.f);
        if (isDynamic)
            shape->calculateLocalInertia(mass, localInertia);

        btDefaultMotionState* myMotionState = new btDefaultMotionState(trans);
        btRigidBody::btRigidBodyConstructionInfo cInfo(mass, myMotionState, shape, localInertia);
        btRigidBody* body = new btRigidBody(cInfo);
        g_world->addRigidBody(body);
    }
    // createCapsule(btVector3(0,0,0), btVector3(0,0,0), 0.f);
}

//
colScene::~colScene()
{
    for (int i = 0; i < g_world->getNumCollisionObjects(); ++i)
    {
        btCollisionObject* obj = g_world->getCollisionObjectArray()[i];
        delete_col(obj);
    }
    delete g_world;
    delete g_solver;
    delete g_broadInterface;
    delete g_dispatcher;
    delete g_colConfig;
    delete g_colPos;
}

// 创建一个胶囊体
btCollisionObject* colScene::createCapsule(btVector3 posA, btVector3 posB, double radius)
{
    btScalar lenX = posB.getX() - posA.getX();
    btScalar lenY = posB.getY() - posA.getY();
    btScalar lenZ = posB.getZ() - posA.getZ();
    btScalar height = sqrt(lenX*lenX + lenY*lenY + lenZ*lenZ);

    btScalar posX = (posA.getX()+posB.getX())/2.f;
    btScalar posY = (posA.getY()+posB.getY())/2.f;
    btScalar posZ = (posA.getZ()+posB.getZ())/2.f;

    printf("lenX  -> %f\n", lenX );
    printf("lenY  -> %f\n", lenY );
    printf("lenZ  -> %f\n", lenZ );
    printf("heigh -> %f\n", height);

    printf("posX  -> %f\n", posX );
    printf("posY  -> %f\n", posY );
    printf("posZ  -> %f\n", posZ );

    return createCapsule2(radius, height, btVector3(posX, posY, posZ), btQuaternion(lenX, lenY, lenZ, 0.f));
}


// 创建一个胶囊体
btCollisionObject* colScene::createCapsule2(double radius, btScalar height, btVector3 pos, btQuaternion rot)
{
    btCapsuleShape* shape = new btCapsuleShape((btScalar)radius, height);
    btTransform trans;
    trans.setIdentity();
    trans.setOrigin(pos);
    trans.setRotation(rot);

    btScalar mass=1.f;
    btVector3 localInertia(0, 0, 0);
    bool isDynamic = (mass != 0.f);
    if (isDynamic)
        shape->calculateLocalInertia(mass, localInertia);

    btDefaultMotionState* myMotionState = new btDefaultMotionState(trans);
    btRigidBody::btRigidBodyConstructionInfo cInfo(mass, myMotionState, shape, localInertia);
    btRigidBody* body = new btRigidBody(cInfo);
    g_world->addRigidBody(body);
    return body;
}

int colScene::checkPos(btCollisionObject* obj)
{
    MyColCallBack callBack;
    g_world->contactTest(obj, callBack);
    return 1;
}

//
int colScene::checkAllPos()
{
    g_world->performDiscreteCollisionDetection();
    // g_world->stepSimulation(1.f/60.f);

    int is_col = 0;
    list<btCollisionObject*> m_collisionObjects;
    int numManifolds = g_world->getDispatcher()->getNumManifolds();

    for(int i=0; i<numManifolds; i++)
    {
        btPersistentManifold* contactManifold = g_world->getDispatcher()->getManifoldByIndexInternal(i);
        btCollisionObject* obA = (btCollisionObject*)(contactManifold->getBody0());
        btCollisionObject* obB = (btCollisionObject*)(contactManifold->getBody1());

        int numContacts = contactManifold->getNumContacts();
        for(int j=0; j<numContacts; j++)
        {
            btManifoldPoint& pt = contactManifold->getContactPoint(j);
            if(pt.getDistance()<0.f)
            {
                m_collisionObjects.push_back(obA);
                m_collisionObjects.push_back(obB);
                btVector3 posA = pt.getPositionWorldOnA();
                btVector3 posB = pt.getPositionWorldOnB();
                printf("%d -> {%f, %f, %f}\n", i, posA.getX(), posA.getY(), posA.getZ()); // 碰撞点
                printf("%d -> {%f, %f, %f}\n", i, posB.getX(), posB.getY(), posB.getZ());
            }
        }
    }

    if(m_collisionObjects.size()>0)
    {
        m_collisionObjects.sort();
        m_collisionObjects.unique();
        for(list<btCollisionObject*>::iterator itr = m_collisionObjects.begin(); itr != m_collisionObjects.end(); ++itr) {
            btCollisionObject* colObj = *itr;

            if(colObj->getCollisionShape()->getShapeType()==CAPSULE_SHAPE_PROXYTYPE) // 如果是胶囊体刚体
            {
                btTransform trans = colObj->getWorldTransform();
                g_colPos->setX(trans.getOrigin().getX()),
                g_colPos->setY(trans.getOrigin().getY()),
                g_colPos->setZ(trans.getOrigin().getZ()),
                printf("next -> {%f, %f, %f}\n", g_colPos->getX(), g_colPos->getY(), g_colPos->getZ());
                is_col = 1;
            }
        }
        m_collisionObjects.clear();
    }
    // removeAllCapsule(); // 不需要删除，永久存在一个胶囊体
    return is_col;
}

//
void colScene::delete_col(btCollisionObject* obj)
{
    btRigidBody* body = btRigidBody::upcast(obj);
    if (body && body->getMotionState())
    {
        delete body->getMotionState();
        delete body->getCollisionShape();
    }
    g_world->removeCollisionObject(obj);
    delete obj;
};

void colScene::removeAllCapsule()
{
    btAlignedObjectArray<btCollisionObject*> objs = g_world->getCollisionObjectArray();
    for (int i = 0; i < objs.size(); ++i)
    {
        if(objs[i]->getCollisionShape()->getShapeType()==CAPSULE_SHAPE_PROXYTYPE)
        {
            g_world->removeCollisionObject(objs[i]);
        }
    }
};